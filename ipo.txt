Input:

For input my algorithm takes source text, in this case a collection of recipes, and processes it into a probability stucture. The structure works by iterating over each word in the input text and calculating the frequency of each word that appears after it. It does this by establishing a prefix word, and then checking whether the next word, the suffix, has been counted before shifting to the next word over and checking the suffix for it. The first time the program encounters a new suffix, it adds it to the suffix compartment of the prefix dictionary and adds one to it’s count and the total suffix count. Any subsequent encounters cause the addition of one to that suffix’s count, and the total suffix count.

Output: 
Using the word probability data collected earlier, the algorithm selects a random seed word, and from there selects a random number. The number is a percentage and the algorithm scrolls through the possible suffixes for the current prefix and finds the one that corresponds to the given random percentage. The suffix just selected then becomes the next prefix, and the process continues until a word with a period at the end is encountered. After a complete sentence has been made, the program proceeds to make 19 more sentences and print them to output. The output is done by printing the output string variable, which is the string generated by the markov chain, albeit with the first ‘seed’ sentence removed (because it’s usually incomprehensible).